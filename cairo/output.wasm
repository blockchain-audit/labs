type [4] = Array<[3]> [storable: true, drop: true, dup: false, zero_sized: false];
type [13] = Box<[3]> [storable: true, drop: true, dup: true, zero_sized: false];
type [14] = Struct<ut@Tuple, [13]> [storable: true, drop: true, dup: true, zero_sized: false];
type [2] = Struct<ut@core::panics::Panic> [storable: true, drop: true, dup: true, zero_sized: true];
type [5] = Struct<ut@Tuple, [2], [4]> [storable: true, drop: true, dup: false, zero_sized: false];
type [15] = Enum<ut@core::panics::PanicResult::<(core::box::Box::<@core::felt252>,)>, [14], [5]> [storable: true, drop: true, dup: false, zero_sized: false];
type [0] = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type [1] = Struct<ut@Tuple, [0]> [storable: true, drop: true, dup: true, zero_sized: true];
type [6] = Enum<ut@core::panics::PanicResult::<((),)>, [1], [5]> [storable: true, drop: true, dup: false, zero_sized: false];
type [16] = Enum<ut@core::bool, [0], [0]> [storable: true, drop: true, dup: true, zero_sized: false];
type [3] = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type [7] = NonZero<[3]> [storable: true, drop: true, dup: true, zero_sized: false];
type [8] = Struct<ut@Tuple, [3]> [storable: true, drop: true, dup: true, zero_sized: false];
type [9] = Enum<ut@core::panics::PanicResult::<(@core::felt252,)>, [8], [5]> [storable: true, drop: true, dup: false, zero_sized: false];
type [10] = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type [12] = u32 [storable: true, drop: true, dup: true, zero_sized: false];
type [11] = Snapshot<[4]> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc [4] = array_new<[3]>;
libfunc [42] = felt252_const<1>;
libfunc [15] = store_temp<[3]>;
libfunc [3] = array_append<[3]>;
libfunc [43] = felt252_const<2>;
libfunc [44] = felt252_const<3>;
libfunc [45] = snapshot_take<[4]>;
libfunc [46] = u32_const<0>;
libfunc [34] = store_temp<[10]>;
libfunc [36] = store_temp<[11]>;
libfunc [37] = store_temp<[12]>;
libfunc [20] = function_call<user@[2]>;
libfunc [12] = store_temp<[4]>;
libfunc [19] = enum_match<[9]>;
libfunc [32] = branch_align;
libfunc [18] = struct_deconstruct<[8]>;
libfunc [47] = rename<[3]>;
libfunc [48] = snapshot_take<[3]>;
libfunc [49] = drop<[3]>;
libfunc [17] = felt252_sub;
libfunc [16] = felt252_is_zero;
libfunc [50] = u32_const<1>;
libfunc [7] = struct_construct<[0]>;
libfunc [41] = enum_init<[16], 1>;
libfunc [57] = store_temp<[16]>;
libfunc [51] = jump;
libfunc [52] = drop<[7]>;
libfunc [40] = enum_init<[16], 0>;
libfunc [53] = drop<[4]>;
libfunc [0] = enum_init<[6], 1>;
libfunc [58] = store_temp<[6]>;
libfunc [39] = enum_match<[16]>;
libfunc [14] = drop<[0]>;
libfunc [54] = u32_const<2>;
libfunc [55] = felt252_const<1962877983706524576356>;
libfunc [8] = function_call<user@[0]>;
libfunc [6] = struct_construct<[1]>;
libfunc [5] = enum_init<[6], 0>;
libfunc [56] = felt252_const<512903969140>;
libfunc [2] = struct_construct<[2]>;
libfunc [1] = struct_construct<[5]>;
libfunc [60] = function_call<user@[4]>;
libfunc [59] = enum_match<[6]>;
libfunc [61] = drop<[1]>;
libfunc [62] = felt252_add;
libfunc [27] = function_call<user@[3]>;
libfunc [26] = enum_match<[15]>;
libfunc [25] = struct_deconstruct<[14]>;
libfunc [24] = unbox<[3]>;
libfunc [23] = struct_construct<[8]>;
libfunc [22] = enum_init<[9], 0>;
libfunc [38] = store_temp<[9]>;
libfunc [21] = enum_init<[9], 1>;
libfunc [9] = function_call<user@[1]>;
libfunc [13] = store_temp<[0]>;
libfunc [31] = array_get<[3]>;
libfunc [30] = struct_construct<[14]>;
libfunc [29] = enum_init<[15], 0>;
libfunc [35] = store_temp<[15]>;
libfunc [33] = felt252_const<1637570914057682275393755530660268060279989363>;
libfunc [28] = enum_init<[15], 1>;
libfunc [10] = print;

[4]() -> ([1]); // 0
[42]() -> ([2]); // 1
[15]([2]) -> ([2]); // 2
[3]([1], [2]) -> ([3]); // 3
[43]() -> ([4]); // 4
[15]([4]) -> ([4]); // 5
[3]([3], [4]) -> ([5]); // 6
[44]() -> ([6]); // 7
[15]([6]) -> ([6]); // 8
[3]([5], [6]) -> ([7]); // 9
[45]([7]) -> ([8], [9]); // 10
[46]() -> ([10]); // 11
[34]([0]) -> ([13]); // 12
[36]([9]) -> ([14]); // 13
[37]([10]) -> ([15]); // 14
[20]([13], [14], [15]) -> ([11], [12]); // 15
[12]([8]) -> ([8]); // 16
[19]([12]) { fallthrough([16]) 137([17]) }; // 17
[32]() -> (); // 18
[18]([16]) -> ([18]); // 19
[47]([18]) -> ([19]); // 20
[48]([19]) -> ([20], [21]); // 21
[49]([20]) -> (); // 22
[42]() -> ([22]); // 23
[48]([22]) -> ([23], [24]); // 24
[49]([23]) -> (); // 25
[47]([21]) -> ([25]); // 26
[47]([24]) -> ([26]); // 27
[17]([25], [26]) -> ([27]); // 28
[15]([27]) -> ([27]); // 29
[16]([27]) { fallthrough() 72([28]) }; // 30
[32]() -> (); // 31
[45]([8]) -> ([29], [30]); // 32
[50]() -> ([31]); // 33
[34]([11]) -> ([34]); // 34
[36]([30]) -> ([35]); // 35
[37]([31]) -> ([36]); // 36
[20]([34], [35], [36]) -> ([32], [33]); // 37
[19]([33]) { fallthrough([37]) 66([38]) }; // 38
[32]() -> (); // 39
[18]([37]) -> ([39]); // 40
[47]([39]) -> ([40]); // 41
[48]([40]) -> ([41], [42]); // 42
[49]([41]) -> (); // 43
[43]() -> ([43]); // 44
[48]([43]) -> ([44], [45]); // 45
[49]([44]) -> (); // 46
[47]([42]) -> ([46]); // 47
[47]([45]) -> ([47]); // 48
[17]([46], [47]) -> ([48]); // 49
[15]([48]) -> ([48]); // 50
[16]([48]) { fallthrough() 57([49]) }; // 51
[32]() -> (); // 52
[7]() -> ([50]); // 53
[41]([50]) -> ([51]); // 54
[57]([51]) -> ([52]); // 55
[51]() { 62() }; // 56
[32]() -> (); // 57
[52]([49]) -> (); // 58
[7]() -> ([53]); // 59
[40]([53]) -> ([54]); // 60
[57]([54]) -> ([52]); // 61
[34]([32]) -> ([55]); // 62
[12]([29]) -> ([56]); // 63
[57]([52]) -> ([57]); // 64
[51]() { 79() }; // 65
[32]() -> (); // 66
[53]([29]) -> (); // 67
[0]([38]) -> ([58]); // 68
[34]([32]) -> ([59]); // 69
[58]([58]) -> ([60]); // 70
return([59], [60]); // 71
[32]() -> (); // 72
[52]([28]) -> (); // 73
[7]() -> ([61]); // 74
[40]([61]) -> ([62]); // 75
[34]([11]) -> ([55]); // 76
[12]([8]) -> ([56]); // 77
[57]([62]) -> ([57]); // 78
[39]([57]) { fallthrough([63]) 85([64]) }; // 79
[32]() -> (); // 80
[14]([63]) -> (); // 81
[53]([56]) -> (); // 82
[34]([55]) -> ([65]); // 83
[51]() { 122() }; // 84
[32]() -> (); // 85
[14]([64]) -> (); // 86
[45]([56]) -> ([66], [67]); // 87
[53]([66]) -> (); // 88
[54]() -> ([68]); // 89
[34]([55]) -> ([71]); // 90
[36]([67]) -> ([72]); // 91
[37]([68]) -> ([73]); // 92
[20]([71], [72], [73]) -> ([69], [70]); // 93
[19]([70]) { fallthrough([74]) 132([75]) }; // 94
[32]() -> (); // 95
[18]([74]) -> ([76]); // 96
[47]([76]) -> ([77]); // 97
[48]([77]) -> ([78], [79]); // 98
[49]([78]) -> (); // 99
[44]() -> ([80]); // 100
[48]([80]) -> ([81], [82]); // 101
[49]([81]) -> (); // 102
[47]([79]) -> ([83]); // 103
[47]([82]) -> ([84]); // 104
[17]([83], [84]) -> ([85]); // 105
[15]([85]) -> ([85]); // 106
[16]([85]) { fallthrough() 119([86]) }; // 107
[32]() -> (); // 108
[55]() -> ([87]); // 109
[15]([87]) -> ([89]); // 110
[8]([89]) -> ([88]); // 111
[14]([88]) -> (); // 112
[7]() -> ([90]); // 113
[6]([90]) -> ([91]); // 114
[5]([91]) -> ([92]); // 115
[34]([69]) -> ([93]); // 116
[58]([92]) -> ([94]); // 117
return([93], [94]); // 118
[32]() -> (); // 119
[52]([86]) -> (); // 120
[34]([69]) -> ([65]); // 121
[4]() -> ([95]); // 122
[56]() -> ([96]); // 123
[15]([96]) -> ([96]); // 124
[3]([95], [96]) -> ([97]); // 125
[2]() -> ([98]); // 126
[1]([98], [97]) -> ([99]); // 127
[0]([99]) -> ([100]); // 128
[34]([65]) -> ([101]); // 129
[58]([100]) -> ([102]); // 130
return([101], [102]); // 131
[32]() -> (); // 132
[0]([75]) -> ([103]); // 133
[34]([69]) -> ([104]); // 134
[58]([103]) -> ([105]); // 135
return([104], [105]); // 136
[32]() -> (); // 137
[53]([8]) -> (); // 138
[0]([17]) -> ([106]); // 139
[34]([11]) -> ([107]); // 140
[58]([106]) -> ([108]); // 141
return([107], [108]); // 142
[34]([0]) -> ([3]); // 143
[60]([3]) -> ([1], [2]); // 144
[59]([2]) { fallthrough([4]) 154([5]) }; // 145
[32]() -> (); // 146
[61]([4]) -> (); // 147
[7]() -> ([6]); // 148
[6]([6]) -> ([7]); // 149
[5]([7]) -> ([8]); // 150
[34]([1]) -> ([9]); // 151
[58]([8]) -> ([10]); // 152
return([9], [10]); // 153
[32]() -> (); // 154
[0]([5]) -> ([11]); // 155
[34]([1]) -> ([12]); // 156
[58]([11]) -> ([13]); // 157
return([12], [13]); // 158
[62]([0], [1]) -> ([2]); // 159
[15]([2]) -> ([3]); // 160
return([3]); // 161
[34]([0]) -> ([5]); // 162
[36]([1]) -> ([6]); // 163
[37]([2]) -> ([7]); // 164
[27]([5], [6], [7]) -> ([3], [4]); // 165
[26]([4]) { fallthrough([8]) 175([9]) }; // 166
[32]() -> (); // 167
[25]([8]) -> ([10]); // 168
[24]([10]) -> ([11]); // 169
[23]([11]) -> ([12]); // 170
[22]([12]) -> ([13]); // 171
[34]([3]) -> ([14]); // 172
[38]([13]) -> ([15]); // 173
return([14], [15]); // 174
[32]() -> (); // 175
[21]([9]) -> ([16]); // 176
[34]([3]) -> ([17]); // 177
[38]([16]) -> ([18]); // 178
return([17], [18]); // 179
[15]([0]) -> ([2]); // 180
[9]([2]) -> ([1]); // 181
[14]([1]) -> (); // 182
[7]() -> ([3]); // 183
[13]([3]) -> ([4]); // 184
return([4]); // 185
[31]([0], [1], [2]) { fallthrough([3], [4]) 193([5]) }; // 186
[32]() -> (); // 187
[30]([4]) -> ([6]); // 188
[29]([6]) -> ([7]); // 189
[34]([3]) -> ([8]); // 190
[35]([7]) -> ([9]); // 191
return([8], [9]); // 192
[32]() -> (); // 193
[4]() -> ([10]); // 194
[33]() -> ([11]); // 195
[15]([11]) -> ([11]); // 196
[3]([10], [11]) -> ([12]); // 197
[2]() -> ([13]); // 198
[1]([13], [12]) -> ([14]); // 199
[28]([14]) -> ([15]); // 200
[34]([5]) -> ([16]); // 201
[35]([15]) -> ([17]); // 202
return([16], [17]); // 203
[4]() -> ([1]); // 204
[3]([1], [0]) -> ([2]); // 205
[12]([2]) -> ([2]); // 206
[10]([2]) -> (); // 207
[7]() -> ([3]); // 208
[13]([3]) -> ([4]); // 209
return([4]); // 210

[4]@0([0]: [10]) -> ([10], [6]);
[5]@143([0]: [10]) -> ([10], [6]);
[6]@159([0]: [3], [1]: [3]) -> ([3]);
[2]@162([0]: [10], [1]: [11], [2]: [12]) -> ([10], [9]);
[0]@180([0]: [3]) -> ([0]);
[3]@186([0]: [10], [1]: [11], [2]: [12]) -> ([10], [15]);
[1]@204([0]: [3]) -> ([0]);

